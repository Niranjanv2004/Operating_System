breakpoint;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) +9 ] = -1;
alias userSP R11;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]* 512 - 1;

backup;
multipush(EIP);
if(EC != 0 || userSP == 512*PTLR - 1)then
    if( EC == 1) then
        print "ilgl instr";
    endif;
    if( EC == 2) then
        print "ilgl mem acs";
    endif;
    if( EC == 3) then
        print "arithmatic";
    endif;
    if(userSP == 512*PTLR - 1) then
        print "stack overflow";
    endif;

    R1 = EXIT_PROCESS;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;

    call MOD_5;
endif;

if(EPN >= 4 && EPN <=7)then
    R1 = GET_CODE_PAGE;
    R2 = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + EPN];
    call MOD_2;//memory manager module
    [PTBR + 2*EPN] = R0;
    [PTBR + 2*EPN + 1] = "1100";

    //print "code page issue";
endif;

if(EPN == 2 || EPN == 3)then
    R1 = GET_FREE_PAGE;
    call MOD_2; //MEMORY MANAGER
    [PTBR + 4] = R0;
    [PTBR + 5] = "1110";
    
    R1 = GET_FREE_PAGE;
    call MOD_2;
    [PTBR + 6] = R0;
    [PTBR + 7] = "1110";
    //print "heap issues";
endif;

multipop(EIP);
restore;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) +9 ] = 0;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
SP = SP + 1;
[[PTBR + 2*SP/512]*512 + SP%512] = EIP;
ireturn;

