alias funNum R1;

if(funNum == BUFFERED_READ)then

    alias blockNum R2;
    alias offSet R3;
    alias memAdd R4;
    alias buffNum R5;

    buffNum = blockNum%MAX_BUFFER;

    multipush(R1, R2, R3, R4, R5);
    R1 = ACQUIRE_BUFFER;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = buffNum;
    call MOD_0;
    multipop(R1, R2, R3, R4, R5);
    
    if([BUFFER_TABLE + buffNum*4 + 0] != blockNum)then

        if([BUFFER_TABLE + buffNum*4 + 1] == 1)then

            multipush(R1, R2, R3, R4, R5);
            R1 = DISK_STORE;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = 71 + buffNum;
            R4 = [BUFFER_TABLE + buffNum*4 + 0];
            call MOD_4;
            multipop(R1,R2, R3, R4, R5);

            [BUFFER_TABLE + buffNum*4 + 1] = 0;
        endif;


        multipush(R1, R2, R3, R4, R5);
        R1 = DISK_LOAD;
        R4 = blockNum;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = 71 + buffNum;
        call MOD_4;
        multipop(R1,R2, R3, R4, R5);

        [BUFFER_TABLE + buffNum*4 + 0] = blockNum;

    endif;
    
    [memAdd] = [(71 + buffNum)*512 + offSet];

    R1 = RELEASE_BUFFER;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = buffNum;
    call MOD_0;

    return;
endif;

if(funNum == CLOSE)then

    alias inodeIndex R4;
    alias fileIndex R2;

    inodeIndex = [OPEN_FILE_TABLE + fileIndex*4 + 0];
    [OPEN_FILE_TABLE + fileIndex*4 + 1] = [OPEN_FILE_TABLE + fileIndex*4 + 1] - 1;
    
    if([OPEN_FILE_TABLE + fileIndex*4 + 1] == 0)then
        [OPEN_FILE_TABLE + fileIndex*4 + 0] = -1;
        [OPEN_FILE_TABLE + fileIndex*4 + 1] = -1;
        [OPEN_FILE_TABLE + fileIndex*4 + 2] = -1;
        [OPEN_FILE_TABLE + fileIndex*4 + 3] = -1;

        if(inodeIndex != INODE_ROOT)then
            [FILE_STATUS_TABLE + inodeIndex*4 + 1] = [FILE_STATUS_TABLE + inodeIndex*4 + 1] - 1;
            if([FILE_STATUS_TABLE + inodeIndex*4 + 1] == 0)then
                [FILE_STATUS_TABLE + inodeIndex*4 + 1] = -1;
            endif;
        endif;
        
    endif;  
endif;

if(funNum == OPEN)then

    alias inodeIndex R5;
    alias FileName R2;
    
    inodeIndex = 0;
    while(inodeIndex < MAX_FILE_NUM && [INODE_TABLE + inodeIndex*16 + 1] != FileName)do
        inodeIndex = inodeIndex + 1;
    endwhile;

    if(inodeIndex == MAX_FILE_NUM)then
        R0 = -1;
        return;
    endif;
    
    multipush(R0, R1, R2, R3, R4, R5);
    R1 = ACQUIRE_INODE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = inodeIndex;
    call MOD_0;
    R10 = R0;
    multipop(R0, R1, R2, R3, R4, R5);

    if(R10 == -1)then
        print "no inode";
        R0 = -1;
    else
        if([INODE_TABLE + inodeIndex*16 + 0] == EXEC)then
            print "exec";
            R0 = -1;
        else
            alias fileIndex R6;
            fileIndex = 0;

            while(fileIndex < MAX_OPENFILE_NUM)do
                if([OPEN_FILE_TABLE + fileIndex*4 + 0] == -1)then
                    break;
                endif;
                fileIndex = fileIndex + 1;
            endwhile;

            if(fileIndex == MAX_OPENFILE_NUM)then
                R0 = -2;
            else

                alias fileTable R7;
                alias openFileTable R8;
                fileTable = FILE_STATUS_TABLE + inodeIndex*4;
                openFileTable = OPEN_FILE_TABLE + fileIndex*4;

                if(FileName =="root")then
                    [openFileTable + 0] = INODE_ROOT;
                else
                    if([fileTable + 1] == -1)then
                        [fileTable + 1] = 1;
                    else
                        [fileTable + 1] = [fileTable + 1] + 1;
                    endif;
                    [openFileTable + 0] = inodeIndex;
                endif;

                [openFileTable + 1] = 1;
                [openFileTable + 2] = 0;
                
                R0 = fileIndex;
            endif;
        endif;

        multipush(R0);
        R1 = RELEASE_INODE;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = inodeIndex;
        call MOD_0;
        multipop(R0);
    endif;
endif;

if(funNum == BUFFERED_WRITE)then
    alias blockNum R2;
    alias offSet R3;
    alias word R4;
    alias buffNum R5;

    buffNum = blockNum%MAX_BUFFER;

    alias buffTable R6;
    buffTable= BUFFER_TABLE + buffNum*4;

    multipush(R1, R2, R3, R4, R5, R6);
    R1 = ACQUIRE_BUFFER;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = buffNum;
    call MOD_0;
    multipop(R1, R2, R3, R4, R5, R6);

    if([buffTable + 0] != blockNum)then
        
        if([buffTable + 1] == 1)then

            multipush(R1, R2, R3, R4, R5, R6);
            R1 = DISK_STORE;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = 71 + buffNum;
            R4 = [buffTable + 0];
            call MOD_4;
            multipop(R1, R2, R3, R4, R5, R6);

            [buffTable + 1] = 0;
        endif;

        multipush(R1, R2, R3, R4, R5, R6);
        R1 = DISK_LOAD;
        R4 = blockNum;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = 71 + buffNum;
        call MOD_4;
        multipop(R1, R2, R3, R4, R5, R6);

        [buffTable + 0] = blockNum;

    endif;

    [(71 + buffNum)*512 + offSet] = word;
    [buffTable + 1] = 1;

    R1 = RELEASE_BUFFER;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = buffNum;
    call MOD_0;

endif;

return;